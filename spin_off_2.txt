// === Utility ===
var toRadians = function(deg) {
    return deg * Math.PI / 180;
};

// === Global Variables ===
var keys = {};
var fireKeys = {};
var projectiles = [];
var state = "menu";

// === Key Tracking ===
keyPressed = function() {
    keys[keyCode] = true;
};

keyReleased = function() {
    keys[keyCode] = false;
};

// === Projectile Class ===
var Projectile = function(x, y, angleDeg, color) {
    this.x = x;
    this.y = y;
    this.angleRad = toRadians(angleDeg);
    this.speed = 5;
    this.color = color;
};

Projectile.prototype.update = function() {
    this.x += Math.cos(this.angleRad) * this.speed;
    this.y += Math.sin(this.angleRad) * this.speed;
};

Projectile.prototype.draw = function() {
    fill(this.color);
    noStroke();
    ellipse(this.x, this.y, 10, 10);
};

// === Player Class ===
var Player = function(x, y, leftKey, rightKey, fireKey, baseAngle, color) {
    this.x = x;
    this.y = y;
    this.vx = 0;
    this.leftKey = leftKey;
    this.rightKey = rightKey;
    this.fireKey = fireKey;
    this.baseAngle = baseAngle; // 270 for bottom, 90 for top
    this.color = color;

    this.lastShotTime = -Infinity;
    this.cooldown = 2000; // 2 seconds in milliseconds

    this.indicator = {
        angle: 0,
        direction: 1,
        range: 60,
        speed: 2
    };
};

Player.prototype.update = function() {
    // Movement
    if (keys[this.leftKey]) {
        this.vx = -2;
    } else if (keys[this.rightKey]) {
        this.vx = 2;
    } else {
        this.vx = 0;
    }

    this.x = constrain(this.x + this.vx, 25, 375);

    // Indicator swing
    var ind = this.indicator;
    ind.angle += ind.speed * ind.direction;
    if (ind.angle > ind.range || ind.angle < -ind.range) {
        ind.direction *= -1;
    }
};

Player.prototype.draw = function() {
    // Draw player
    fill(this.color);
    ellipse(this.x, this.y, 50, 50);

    // Draw aiming line
    var angleDeg = this.baseAngle + this.indicator.angle;
    var angleRad = toRadians(angleDeg);
    var tipX = this.x + Math.cos(angleRad) * 60;
    var tipY = this.y + Math.sin(angleRad) * 60;

    stroke(this.color);
    strokeWeight(3);
    line(this.x, this.y, tipX, tipY);

    // Cooldown indicator
    var now = millis();
    var remaining = this.cooldown - (now - this.lastShotTime);
    if (remaining > 0) {
        fill(255, 0, 0);
        textAlign(CENTER);
        textSize(12);
        text("Cooldown", this.x, this.y - 35);
    }
};

Player.prototype.fire = function() {
    var now = millis();
    if (keys[this.fireKey]) {
        if (!fireKeys[this.fireKey]) {
            fireKeys[this.fireKey] = true;

            if (now - this.lastShotTime >= this.cooldown) {
                var angle = this.baseAngle + this.indicator.angle;
                var tipX = this.x + Math.cos(toRadians(angle)) * 60;
                var tipY = this.y + Math.sin(toRadians(angle)) * 60;

                projectiles.push(new Projectile(this.x, this.y, angle, this.color));
                this.lastShotTime = now;
            }
        }
    } else {
        fireKeys[this.fireKey] = false;
    }
};

// === Menu Screen ===
var drawMenu = function() {
    background(220);
    textAlign(CENTER, CENTER);
    textSize(36);
    fill(0);
    text("Mundo Dodgeball", 200, 100);

    fill(0, 150, 255);
    rect(150, 220, 100, 50, 10);

    fill(255);
    textSize(20);
    text("Play", 200, 245);
};

mousePressed = function() {
    if (state === "menu" && mouseX > 150 && mouseX < 250 && mouseY > 220 && mouseY < 270) {
        state = "game";
    }
};

// === Players ===
var player1 = new Player(200, 350, 65, 68, 32, 270, color(0));       // A/D/Space
var player2 = new Player(200, 50, LEFT, RIGHT, ENTER, 90, color(100)); // Arrows/Enter

// === Game Loop ===
draw = function() {
    if (state === "menu") {
        drawMenu();
    } else if (state === "game") {
        background(255);

        player1.update();
        player2.update();
        player1.fire();
        player2.fire();
        player1.draw();
        player2.draw();

        for (var i = 0; i < projectiles.length; i++) {
            var p = projectiles[i];
            p.update();
            p.draw();
        }
    }
};
